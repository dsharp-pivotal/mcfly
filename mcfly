#!/bin/bash

# Multi-Concourse Fly
# A time-traveling fly for users of multiple Concourse instances.
# mcfly will download and choose a version of fly depending on the target.

die() {
  echo "mcfly: $*" >&2
  exit 1
}

get_arch() {
  local arch=$(uname -m)
  case "$arch" in
    x86_64) echo amd64 ;;
    *) echo "$arch" ;;
  esac
}

latest_downloaded_fly_version() {
  local latest_fly=$(find "$bindir" -name 'fly-*' | sort -V | tail -n 1)
  echo "${latest_fly#*fly-}"
}

target_api() {
  local api=$(yq e ".targets.$target.api" $HOME/.flyrc)
  if [ "$api" = 'null' ] ; then
    die "Target \"$target\" could not be found in ~/.flyrc"
  fi
  echo $api
}

api_version() {
  # I don't always parse JSON, but when I do, I prefer a YAML parser.
  curl -s "$api/api/v1/info" | yq e '.version' -
}

determine_fly_version() {
  #TODO: test cases
  # fly <no -t> -h           --> latest
  # fly <no -t> targets      --> latest
  # fly <no -t> login        --> error
  # fly <no -t> <else>       --> error
  # fly -t xyz targets       --> targets[xyz].api | fetch
  # fly -t xyz login         --> targets[xyz].api | fetch
  # fly -t xyz login -c API  --> API | fetch
  # fly -t xyz <else>        --> targets[xyz].api | fetch

  if [ -z "$target" ] ; then
    if $cmd_targets || $help ; then
      version=$(latest_downloaded_fly_version)
    fi
  else
    if ! ( $cmd_login && [ -n "$api" ] ) ; then
      api=$(target_api) || exit $?
    fi
    version=$(api_version)
  fi
}

download_fly() {
  platform=$(uname | tr '[[:upper:]]' '[[:lower:]]')
  arch=$(get_arch)
  read -p "Downloading $fly from $api: Press Enter to continue, ^C to cancel "
  curl "$api/api/v1/cli?arch=$arch&platform=$platform" -o "$bindir/$fly"
  chmod +x "$bindir/$fly"
}

parse_args() {
  target=
  api=
  version=

  cmd_targets=false
  cmd_login=false
  help=false

  args=("$@")
  while [ $# -gt 0 ] ; do
    case $1 in
      -h|--help)           help=true ;;
      -t|--target)         target="$2" ; shift ;;
      --target=*)          target="${1#--target=}" ;;
      -c|--concourse-url)  if $cmd_login ; then api="$2" ; shift ; fi ;;
      --concourse-url=*)   if $cmd_login ; then api="${1#--concourse-url=}" ; fi ;;
      targets)             cmd_targets=true ;;
      login)               cmd_login=true ;;
      --|'') break ;;
    esac
    shift
  done
}

main() {
  set -u
  bindir=$(dirname $0)

  parse_args "$@"
  determine_fly_version

  #TODO: Is there something better to do when -t is not passed?
  if [ -z "$version" ] ; then
    echo "mcfly: A target (-t) is required to know what version of fly to use"
    exit 1
  fi


  fly="fly-$version"

  if ! type "$fly" > /dev/null; then
    download_fly
  fi

  exec "$fly" "${args[@]}"
}

[[ "$0" == "${BASH_SOURCE[0]}" ]] && main "$@"

# vim: set sw=2 sts=2 ai cin et:
